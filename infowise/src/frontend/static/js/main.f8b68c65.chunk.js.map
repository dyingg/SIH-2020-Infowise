{"version":3,"sources":["logo.svg","Components/TitleBar.js","Components/ThirdParty.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Title","Typography","TitleBar","className","DingdingOutlined","style","fontSize","color","level","class","id","columns","title","dataIndex","key","render","text","tag","ThirdParty","data","dataSource","pagination","scroll","y","Search","Input","TabPane","Tabs","Paragraph","ipcRenderer","window","require","ResultTitle","programState","type","App","useState","updateProgramState","ip","updateIp","score","updateScore","thirdPartData","updateThirdPartyData","useEffect","on","e","console","log","average","reduce","acum","cur","length","toFixed","placeholder","loading","enterButton","onSearch","value","send","defaultActiveKey","onChange","tab","bordered","width","percent","status","format","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f8b68c65.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport { DingdingOutlined } from \"@ant-design/icons\";\r\nimport { Typography, TimePicker } from \"antd\";\r\n\r\nimport \"./../assets/TrafficLights.scss\";\r\n\r\nconst { Title } = Typography;\r\nfunction TitleBar() {\r\n  return (\r\n    <div className=\"title-bar\">\r\n      <DingdingOutlined style={{ fontSize: \"30px\", color: \"#ffffff\" }} />\r\n      <Title level={3} style={{ color: \"#ffffff\" }}>\r\n        InfoWise{\" \"}\r\n      </Title>\r\n\r\n      <div class=\"actions focus\">\r\n        <div class=\"traffic-lights focus\">\r\n          <button class=\"traffic-light traffic-light-close\" id=\"close\"></button>\r\n          <button\r\n            class=\"traffic-light traffic-light-minimize\"\r\n            id=\"minimize\"\r\n          ></button>\r\n          <button\r\n            class=\"traffic-light traffic-light-maximize\"\r\n            id=\"maximize\"\r\n          ></button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TitleBar;\r\n","import React from \"react\";\r\nimport { Table, Tag, Space } from \"antd\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    dataIndex: \"name\",\r\n    key: \"name\",\r\n    render: (text) => <a>{text}</a>,\r\n  },\r\n  {\r\n    title: \"Type\",\r\n    dataIndex: \"type\",\r\n    key: \"type\",\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    dataIndex: \"status\",\r\n    key: \"status\",\r\n  },\r\n  {\r\n    title: \"Score\",\r\n    key: \"score\",\r\n    dataIndex: \"score\",\r\n    render: (tag) => {\r\n      let color = \"green\";\r\n      if (tag > 50) {\r\n        color = \"volcano\";\r\n      }\r\n      return <Tag color={color}>{tag}</Tag>;\r\n    },\r\n  },\r\n];\r\n\r\nfunction ThirdParty({ data }) {\r\n  return (\r\n    <div className=\"third-party\">\r\n      <Table\r\n        columns={columns}\r\n        dataSource={data}\r\n        pagination={false}\r\n        scroll={{ y: \"350px\" }}\r\n      />{\" \"}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ThirdParty;\r\n","import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.scss\";\n\nimport TitleBar from \"./Components/TitleBar\";\nimport ThirdParty from \"./Components/ThirdParty\";\nimport { Input, Typography, Tabs, Card } from \"antd\";\n\nimport { Progress } from \"antd\";\n\nconst { Search } = Input;\nconst { TabPane } = Tabs;\nconst { Title } = Typography;\nconst { Paragraph } = Typography;\nconst electron = window.require(\"electron\");\n\nconst ipcRenderer = electron.ipcRenderer;\n\nfunction ResultTitle({ programState }) {\n  if (programState == \"Idle\") {\n    return (\n      <>\n        <Title level={3}>Awaiting Input</Title>\n        <Paragraph>Please enter an IP to analyze</Paragraph>\n      </>\n    );\n  } else if (programState == \"Detecting\") {\n    return (\n      <>\n        <Title level={3}>Detecting</Title>\n        <Paragraph>Fetching data from third party sources</Paragraph>\n      </>\n    );\n  } else if (programState == \"Bad\") {\n    return (\n      <>\n        <Title type=\"danger\" level={3}>\n          VPN/Proxy Detected\n        </Title>\n        <Paragraph>This IP is a VPN/Proxy</Paragraph>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <Title level={3}>Good Ip</Title>\n        <Paragraph>A VPN or Proxy was not detected</Paragraph>\n      </>\n    );\n  }\n}\n\nfunction App() {\n  function callback(key) {\n    console.log(key);\n  }\n\n  let [programState, updateProgramState] = useState(\"Idle\");\n  let [ip, updateIp] = useState(\"\");\n  let [score, updateScore] = useState(0);\n  let [thirdPartData, updateThirdPartyData] = useState([]);\n\n  useEffect(() => {\n    ipcRenderer.on(\"thirdPartyData\", (e, data) => {\n      updateThirdPartyData(data);\n      console.log(data);\n      let average = data.reduce((acum, cur) => acum + cur.score, 0);\n      average = (average / data.length).toFixed(0);\n      updateScore(average);\n      if (average > 50) {\n        updateProgramState(\"Bad\");\n      } else {\n        updateProgramState(\"Good\");\n      }\n    });\n  }, []);\n\n  return (\n    <div>\n      <TitleBar />\n      <div className=\"App\">\n        <div className=\"ipBox\">\n          <div>\n            <Title level={3}>Proxy VPN Check</Title>\n            <Paragraph className=\"subtitle\">\n              Start a comprehensive check to determine where the given IP is a\n              VPN or Proxy\n            </Paragraph>\n          </div>\n          <Search\n            placeholder=\"127.0.0.1\"\n            loading={programState == \"Detecting\" ? true : false}\n            enterButton\n            onSearch={(value) => {\n              updateIp(value);\n              updateProgramState(\"Detecting\");\n              ipcRenderer.send(\"thirdPartyRecon\", value);\n            }}\n          />\n        </div>\n\n        <div className=\"info\">\n          <Tabs defaultActiveKey=\"2\" onChange={callback}>\n            <TabPane tab=\"Third Party Analysis\" key=\"2\">\n              <ThirdParty data={thirdPartData} />\n            </TabPane>\n            <TabPane tab=\"WHOIS Analysis\" key=\"1\">\n              Coming Soon\n            </TabPane>\n          </Tabs>\n        </div>\n        <div className=\"result\">\n          <Card bordered={true} style={{ width: \"100%\" }}>\n            <div className=\"result\">\n              <div>\n                <Progress\n                  type=\"circle\"\n                  percent={score}\n                  width={80}\n                  status={score > 65 ? \"exception\" : \"\"}\n                  format={(percent) => percent + \"%\"}\n                />\n              </div>\n              <div>\n                <ResultTitle programState={programState} />\n              </div>\n              <div>\n                <Title level={3}>{ip}</Title>\n                <Paragraph>Infowise Beta 0.1</Paragraph>\n              </div>\n            </div>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}